---
title: "Meeting Slides"
author: "Wooyong Park"
date: '2024-09-11'
format: 
  revealjs:
    footer: "Assortative Mating in Cities"
    title-slide-attributes: 
      data-background-image: images/title.png
    transition: slide
    fontsize: 24pt
---

```{r setup, include=FALSE}

```

<!-- ## Overview -->

<!-- -   How the PSID dataset looks like -->
<!-- -   Marriage Related Variables and Availability -->
<!-- -   Sample Data Analysis(State Level) -->
<!-- -   Package Introduction and Progress -->
<!-- -   Further Investigation Plan -->
<!-- -   Data Application Process -->

## 

This is what the raw dataset looks like

```{r}
#| echo: true
#| message: false

library(tidyverse)
load('data/fam2021er.rda')
head(fam2021er)

```
<a href="https://simba.isr.umich.edu/default.aspx" style="position: absolute; bottom: 10px; right: 10px; font-size: smaller; color: blue;">PSID Data Center</a>

## 

Variable names should be modified and be processed so that the researcher can use via [3rd party packages](https://github.com/cran/psidread).

| Year | hh education | number of children |
|:----:|:------------:|:------------------:|
| 2013 |   ER58223    |      ER53020       |
| 2015 |   ER65459    |      ER60021       |
| 2017 |   ER71538    |      ER66021       |
| 2019 |   ER77599    |      ER72021       |

## Marriage related variables and availability

|                                    Variable                                    | Available years |   Level    |
|:---------------------------------------:|:--------------:|:--------------:|
|   [Marital Status(Head)](https://simba.isr.umich.edu/cb.aspx?vList=ER78025)    |    1977-2021    |   Family   |
| [Last known marital status](https://simba.isr.umich.edu/cb.aspx?vList=ER32049) |    All years    | Individual |
|  [Married Pairs Indicator](https://simba.isr.umich.edu/cb.aspx?vList=ER34907)  |    All years    | Individual |
| [Change in Martial Status](https://simba.isr.umich.edu/cb.aspx?vList=ER81929)  |    1977-2021    |   Family   |
|      [\# of Marriages](https://simba.isr.umich.edu/cb.aspx?vList=ER32034)      |    All years    | Individual |
|  [Month of First Marriage](https://simba.isr.umich.edu/cb.aspx?vList=ER32035)  |    All years    | Individual |
|  [Year of First Marriage](https://simba.isr.umich.edu/cb.aspx?vList=ER32036)   |    All years    | Individual |
| [Month of First Separation](https://simba.isr.umich.edu/cb.aspx?vList=ER32040) |    All years    | Individual |
| [Year of First Separation](https://simba.isr.umich.edu/cb.aspx?vList=ER32041)  |    All years    | Individual |

## Marriage related variables and availability

|                                           Variable                                           | Available years |   Level    |
|:-----------------------------------------:|:-------------:|:-------------:|
|     [Status of Most Recent Marriage](https://simba.isr.umich.edu/cb.aspx?vList=ER32044)      |    All years    | Individual |
| [Month Separated of Most Recent Marriage](https://simba.isr.umich.edu/cb.aspx?vList=ER32047) |    All years    | Individual |
| [Year Separated of Most Recent Marriage](https://simba.isr.umich.edu/cb.aspx?vList=ER32048)  |    All years    | Individual |
|   [Month ended of Most Recent Marriage](https://simba.isr.umich.edu/cb.aspx?vList=ER32045)   |    All years    | Individual |
|   [Year ended of Most Recent Marriage](https://simba.isr.umich.edu/cb.aspx?vList=ER32046)    |    All years    | Individual |

## Geographic level of variables

<p style="text-align: justify;">

**Only state level residence is publicly open.** Finer levels including county, tract, block, zip code, MSA, CBSA and FIPS are all restricted. I'll explain the details of accessing details not before long.

</p>

## Sample Data Analysis(Male, No weight)

```{r, include=FALSE}
#|echo: false
#assortative_mating_sample_research
library(psidread)
library(tidyverse)


# fm_ratio_hat <- df %>% count(msa_title, NAICSP, wt=PWGTP) %>% left_join(fm_ratio_ind %>% select(-n), by="NAICSP") %>% 
#   group_by(msa_title) %>% summarise(fm_ratio_hat = weighted.mean(fm_ratio_ind, w=n))


varlist = c('p_major_2 || [19]ER34775 [21]ER34975',
            'p_major_1 || [19]ER34774 [21]ER34974',
            'p_degree || [19]ER34744 [21]ER34944',
            'p_yr_college ||	[15]ER34334 [17]ER34533 [19]ER34733 [21]ER34933',
            'p_age || [97]ER33404 [99]ER33504 [01]ER33604 [03]ER33704 [05]ER33804 [07]ER33904 [09]ER34004 [11]ER34104 [13]ER34204 [15]ER34305 [17]ER34504 [19]ER34704 [21]ER34904',
            'p_hh_relation || [97]ER33403 [99]ER33503 [01]ER33603 [03]ER33703 [05]ER33803 [07]ER33903 [09]ER34003 [11]ER34103 [13]ER34203 [15]ER34303 [17]ER34503 [19]ER34703 [21]ER34903',
            'hh_age || [97]ER10009 [99]ER13010 [01]ER17013 [03]ER21017 [05]ER25017 [07]ER36017 [09]ER42017 [11]ER47317 [13]ER53017 [15]ER60017 [17]ER66017 [19]ER72017 [21]ER78017',
            'hh_sex || [97]ER10010 [99]ER13011 [01]ER17014 [03]ER21018 [05]ER25018 [07]ER36018 [09]ER42018 [11]ER47318 [13]ER53018 [15]ER60018 [17]ER66018 [19]ER72018 [21]ER78018',
            'sp_age || [97]ER10011 [99]ER13012 [01]ER17015 [03]ER21019 [05]ER25019 [07]ER36019 [09]ER42019 [11]ER47319 [13]ER53019 [15]ER60019 [17]ER66019 [19]ER72019 [21]ER78019',
            'sp_sex || 	[15]ER60020 [17]ER66020 [19]ER72020 [21]ER78020', 
            'hh_job || [17]ER66195 [19]ER72195 [21]ER78198',
            'hh_job_old || 	[03]ER21145 [05]ER25127 [07]ER36132 [09]ER42167 [11]ER47479 [13]ER53179 [15]ER60194',
            'hh_ind || [17]ER66196 [19]ER72196 [21]ER78199',
            'hh_ind_old || 	[03]ER21146 [05]ER25128 [07]ER36133 [09]ER42168 [11]ER47480 [13]ER53180 [15]ER60195',
            'hh_first_job || [17]ER70945 [19]ER76963 [21]ER81191',
            'hh_first_ind || [17]ER70946 [19]ER76964 [21]ER81192',
            'sp_job || [17]ER66470 [19]ER72472 [21]ER78512',
            'sp_job_old || 03]ER21395 [05]ER25385 [07]ER36390 [09]ER42419 [11]ER47736 [13]ER53442 [15]ER60457',
            'sp_ind || [17]ER66471 [19]ER72473 [21]ER78513',
            'sp_ind_old || [03]ER21396 [05]ER25386 [07]ER36391 [09]ER42420 [11]ER47737 [13]ER53443 [15]ER60458',
            'sp_first_job || [17]ER70807 [19]ER76818 [21]ER81064',
            'sp_first_ind || [17]ER70808 [19]ER76819 [21]ER81065',
            'sp_father_ind || [17]ER70713 [19]ER76721 [21]ER80986',
            'sp_mother_ind || [17]ER70723 [19]ER76731 [21]ER80996',
            'f_new_head || [03]ER24153 [05]ER28052 [07]ER41042 [09]ER46986 [11]ER52410 [13]ER58228 [15]ER65464 [17]ER71543 [19]ER77604 [21]ER81931',
            'f_new_spouse || [03]ER24154 [05]ER28053 [07]ER41043 [09]ER46987 [11]ER52411 [13]ER58229 [15]ER65465 [17]ER71544 [19]ER77605 [21]ER81932',
            'f_residence || [97]ER12221 [99]ER13004 [01]ER17004 [03]ER21003 [05]ER25003 [07]ER36003 [09]ER42003 [11]ER47303 [13]ER53003 [15]ER60003 [17]ER66003 [19]ER72003 [21]ER78003',
            'pair_id ||	[97]ER33407 [99]ER33507 [01]ER33607 [03]ER33707 [05]ER33807 [07]ER33907 [09]ER34007 [11]ER34107 [13]ER34207 [15]ER34308 [17]ER34507 [19]ER34707 [21]ER34907',
            'hh_marst_old || [99]ER16423 [01]ER20369 [03]ER24150 [05]ER28049 [07]ER41039 [09]ER46983 [11]ER52407 [13]ER58225 [15]ER65461 [17]ER71540 [19]ER77601 [21]ER81928',
            'hh_marst || [97]ER10016 [99]ER13021 [01]ER17024 [03]ER21023 [05]ER25023 [07]ER36023 [09]ER42023 [11]ER47323 [13]ER53023 [15]ER60024 [17]ER66024 [19]ER72024 [21]ER78025',
            'fam_comp_change || [01]ER17007 [03]ER21007 [05]ER25007 [07]ER36007 [09]ER42007 [11]ER47307 [13]ER53007 [15]ER60007 [17]ER66007 [19]ER72007 [21]ER78007',
            'marst_change || [99]ER16424 [01]ER20370 [03]ER24151 [05]ER28050 [07]ER41040 [09]ER46984 [11]ER52408 [13]ER58226 [15]ER65462 [17]ER71541 [19]ER77602 [21]ER81929',
            'cross_perwt || [97]ER33438 [99]ER33547 [01]ER33639 [03]ER33742 [05]ER33849 [07]ER33951 [09]ER34046 [11]ER34155 [13]ER34269 [15]ER34414 [17]ER34651 [19]ER34864 [21]ER35065',
            'long_perwt || [97]ER33430 [99]ER33546 [01]ER33637 [03]ER33740 [05]ER33848 [07]ER33950 [09]ER34045 [11]ER34154 [13]ER34268 [15]ER34413 [17]ER34650 [19]ER34863 [21]ER35064',
            'long_famwt || [97]ER12084 [99]ER16518 [01]ER20394 [03]ER24179 [05]ER28078 [07]ER41069 [09]ER47012 [11]ER52436 [13]ER58257 [15]ER65492 [17]ER71570 [19]ER77631 [21]ER81958'
            )


str_df <- psid_str(
  varlist = varlist, 
  type = 'separated')


# psid_unzip(indir = 'data', exdir = 'data', zipped =T,
#            type = 'single', filename = 'J337466.zip')

psid_df <- psid_read(indir = 'data', str_df = str_df, idvars = c('ER30000'), type = 'single', filename = 'J337466.zip')

str(psid_df)

df <- psid_reshape(psid_df = psid_df, str_df = str_df, shape = 'long', level = 'individual')
fm_ratio_ind <- read_rds('data/fm_ratio_ind.rds')
ind_share_nation <- read_rds('data/ind_share_nation.rds')
fm_ratio_hat <- read_rds('data/fm_ratio_hat.rds')
industry_code <- readxl::read_xls('data/census_industry.xls') %>% 
  select(name, census_id, naicsp_id) %>% 
  mutate(census_id = as.numeric(census_id))
state_codes <- read_csv('data/psid_state_codes.csv')
state_abbrev <- read_csv('data/US State Names.csv')
ind_share_nation <- ind_share_nation %>% mutate(NAICSP = NAICSP %>% str_sub(start = 5))
fm_ratio_ind <- fm_ratio_ind %>% mutate(NAICSP = NAICSP %>% str_sub(start = 5))

df <- df %>% select(
  -ER30000, -p_major_1, -p_major_2, -p_degree
)

df <- df %>% mutate(fid = pid%/%1000)

df <- df %>% filter(rel2hh %in% c(10,20, 22))

#fm_ratio_hat
fm_ratio_hat <- fm_ratio_hat %>% left_join(state_abbrev, by = c('state' = 'Alpha')) %>% 
  select(State, fm_ratio_hat) %>% 
  filter(!is.na(State))


df <- df %>% left_join(state_codes, by = c('f_residence' = 'ID'))

df <- df %>% left_join(fm_ratio_hat, by = 'State')
```

```{r}
#|echo: false
df %>% filter(hh_sex == 1, year != 1997) %>% group_by(year, State, fid) %>% top_n(1) %>% ungroup() %>% 
  mutate(hh_marst = if_else(hh_marst == 1, 1, 0)) %>% group_by(year, State) %>% 
  summarise(ratio = mean(hh_marst), fm_ratio_hat = mean(fm_ratio_hat)) %>% 
  ggplot() +
  geom_point(aes(fm_ratio_hat, ratio)) +
  geom_smooth(aes(fm_ratio_hat, ratio), method = 'lm') +
  scale_y_continuous(labels = scales::label_comma(scale=100, suffix = '%')) + 
  labs(title = 'female_ratio_hat vs married male household head ratio(no weight)', y = 'ratio of married male', caption = 'Each point represents U.S. states, and note that only the information on family head is included.') +
  facet_wrap( ~ year, scales = 'free_y') + 
  theme_bw()

```

## Sample Data Analysis(Male, No weight)

```{r}
df %>% filter(hh_sex == 1, year != 1997) %>% group_by(year, State, fid) %>% top_n(1) %>% ungroup() %>% 
  mutate(hh_marst = if_else(hh_marst == 1, 1, 0)) %>% group_by(year, State) %>% 
  summarise(ratio = mean(hh_marst), fm_ratio_hat = mean(fm_ratio_hat)) %>% 
  ggplot() +
  geom_point(aes(fm_ratio_hat, ratio)) +
  geom_smooth(aes(fm_ratio_hat, ratio), method = 'lm') +
  labs(title = 'female_ratio_hat vs married male household head ratio(no weight)', y = 'ratio of married male', caption = 'Each point represents U.S. states, and note that only the information on family head is included.') +
  theme_bw()
```

## Sample Data Analysis(Male, Weighted)

```{r}
#|echo: false
df %>% filter(hh_sex == 1, year != 1997) %>% group_by(year, State, fid) %>% top_n(1) %>% ungroup() %>% 
  mutate(hh_marst = if_else(hh_marst == 1, 1, 0)) %>% group_by(year, State) %>% 
  summarise(ratio = weighted.mean(hh_marst, w = long_famwt, na.rm = T), fm_ratio_hat = mean(fm_ratio_hat)) %>% 
  ggplot() +
  geom_point(aes(fm_ratio_hat, ratio)) +
  geom_smooth(aes(fm_ratio_hat, ratio), method = 'lm') +
  scale_y_continuous(labels = scales::label_comma(scale=100, suffix = '%')) + 
  labs(title = 'female_ratio_hat vs married male household head ratio(weighted)', y = 'ratio of married male', caption = 'Each point represents U.S. states, and note that only the information on family head is included.') +
  facet_wrap( ~ year, scales = 'free_y') + 
  theme_bw()
```

## Sample Data Analysis(Male, Weighted)

```{r}
#|echo: false
df %>% filter(hh_sex == 1, year != 1997) %>% group_by(year, State, fid) %>% top_n(1) %>% ungroup() %>% 
  mutate(hh_marst = if_else(hh_marst == 1, 1, 0)) %>% group_by(year, State) %>% 
  summarise(ratio = weighted.mean(hh_marst, w = long_famwt, na.rm = T), fm_ratio_hat = mean(fm_ratio_hat)) %>% 
  ggplot() +
  geom_point(aes(fm_ratio_hat, ratio)) +
  geom_smooth(aes(fm_ratio_hat, ratio), method = 'lm') +
  scale_y_continuous(labels = scales::label_comma(scale=100, suffix = '%')) + 
  labs(title = 'female_ratio_hat vs married male household head ratio(weighted)', y = 'ratio of married male', caption = 'Each point represents U.S. states, and note that only the information on family head is included.') +
  theme_bw()
```

## Sample Data Analysis(Female, No weight)

```{r}
#|echo: false
df %>% filter(hh_sex == 2, year != 1997) %>% group_by(year, State, fid) %>% top_n(1) %>% ungroup() %>% 
  mutate(hh_marst = if_else(hh_marst == 1, 1, 0)) %>% group_by(year, State) %>% 
  summarise(ratio = mean(hh_marst), fm_ratio_hat = mean(fm_ratio_hat)) %>% 
  ggplot() +
  geom_point(aes(fm_ratio_hat, ratio)) +
  geom_smooth(aes(fm_ratio_hat, ratio), method = 'lm') +
  scale_y_continuous(labels = scales::label_comma(scale=100, suffix = '%')) + 
  facet_wrap(~ year, scales = 'free_y') +
  labs(title = 'female_ratio_hat vs married female household head ratio(no weight)', y = 'ratio of married female', caption = 'Each point represents U.S. states, and note that only the information on family head is included.') +
  theme_bw()
```

## Sample Data Analysis(Female, No weight)

```{r}
#|echo: false
df %>% filter(hh_sex == 2, year != 1997) %>% group_by(year, State, fid) %>% top_n(1) %>% ungroup() %>% 
  mutate(hh_marst = if_else(hh_marst == 1, 1, 0)) %>% group_by(year, State) %>% 
  summarise(ratio = mean(hh_marst), fm_ratio_hat = mean(fm_ratio_hat)) %>% 
  ggplot() +
  geom_point(aes(fm_ratio_hat, ratio)) +
  geom_smooth(aes(fm_ratio_hat, ratio), method = 'lm') +
  scale_y_continuous(labels = scales::label_comma(scale=100, suffix = '%'), limits = c(0,0.2)) + 
  labs(title = 'female_ratio_hat vs married female household head ratio(no weight)', y = 'ratio of married female', caption = 'Each point represents U.S. states, and note that only the information on family head is included.\n 10 rows above 20% removed') +
  theme_bw()
```

## Sample Data Analysis(Female, Weighted)

```{r}
#|echo: false
df %>% filter(hh_sex == 2, year != 1997) %>% group_by(year, State, fid) %>% top_n(1) %>% ungroup() %>% 
  mutate(hh_marst = if_else(hh_marst == 1, 1, 0)) %>% group_by(year, State) %>% 
  summarise(ratio = weighted.mean(hh_marst, w = long_famwt), fm_ratio_hat = mean(fm_ratio_hat)) %>% 
  ggplot() +
  geom_point(aes(fm_ratio_hat, ratio)) +
  geom_smooth(aes(fm_ratio_hat, ratio), method = 'lm') +
  scale_y_continuous(labels = scales::label_comma(scale=100, suffix = '%')) + 
    facet_wrap(~ year, scales = 'free_y') +
  labs(title = 'female_ratio_hat vs married female household head ratio(weighted)', y = 'ratio of married female', caption = 'Each point represents U.S. states, and note that only the information on family head is included.') +
  theme_bw()
```

## Sample Data Analysis(Female, Weighted)

```{r}
#|echo: false
df %>% filter(hh_sex == 2, year != 1997) %>% group_by(year, State, fid) %>% top_n(1) %>% ungroup() %>% 
  mutate(hh_marst = if_else(hh_marst == 1, 1, 0)) %>% group_by(year, State) %>% 
  summarise(ratio = weighted.mean(hh_marst, w = long_famwt), fm_ratio_hat = mean(fm_ratio_hat)) %>% 
  ggplot() +
  geom_point(aes(fm_ratio_hat, ratio)) +
  geom_smooth(aes(fm_ratio_hat, ratio), method = 'lm') +
  scale_y_continuous(labels = scales::label_comma(scale=100, suffix = '%'), limits = c(0,0.2)) + 
  labs(title = 'female_ratio_hat vs married female household head ratio(weighted)', y = 'ratio of married female', caption = 'Each point represents U.S. states, and note that only the information on family head is included.\n7 rows above 20% removed') +
  theme_bw()
```

## Package introduction and related progress

[`psidread`](https://cran.r-project.org/web/packages/psidread/vignettes/my-vignette.html) is a package written by Shuyi Qiu to help access PSID data in R. Although the PSID is the longest running longitudinal household survey data in the world, the process of converting raw PSID data files into datasets ready for analysis is quite complex.

## Package introduction and related progress

[`psidread`](https://cran.r-project.org/web/packages/psidread/vignettes/my-vignette.html) helps

<br>

-   create a table of data structure across multiple waves using the text that can be copied and pasted from the website
-   unzip and convert the zipped files without additional help of other software
-   read and merge the data files from multiple waves
-   rename and reshape the dataset to fit the need for advanced analysis

[For more information, please visit [the CRAN vignettes of the author](https://cran.r-project.org/web/packages/psidread/vignettes/my-vignette.html#1_Introduction).]{style="position: absolute; bottom: 10px; right: 10px; font-size: smaller; color: gray;"}

## Downloading the data

![psid data webpage](images/psid_data_center.png)

## DAG of `psidread` workflow

::: columns
::: {.column width="30%"}
<img src="images/psid_read.png" width="300" height="500"/>
:::

::: {.column width="70%"}
Example:

```{r}
#| echo: true
library(psidread)
psid_varlist = c(" hh_age || [13]ER53017 [17]ER66017",
                 " p_age || [13]ER34204")
psid_str(varlist = psid_varlist)
```
:::
:::

## Current Progress on `psidread`

`psidread` is the only available package for now in R. (Several other packages including `psidr`, `easypsid` are outdated.)

However, it returns handful of errors at most stages of its functions.

The issues on the singular data are now solved, but for some reason `psidread` is still giving me errors when using packaged data.

## Current Progress on `psidread`

:::: {.callout-tip title="`psidread::psid_read()`"}
::: {style="height: 20px;"}
:::

```{r}
#| echo: true
#| error: true 
psid_df <- psid_read(indir = output_directory,
                     str_df = str_df,
                     idvars = c('ER30000'),
                     type = 'package',
                     filename = NA)
```
::::

<br> <!--   creates a vertical space(padding) -->

```{r}
#| echo: false
output_directory <- 'data'
indir <- output_directory
idvars <- c('ER30000')

year_toread <- str_df$year
varlist_toread <- unname(unlist(str_df[,c(2:ncol(str_df))]))
varlist_toread <- varlist_toread[!is.na(varlist_toread)]

temp_env <- new.env()

  # Table of key for match
temp_env$key_tb <- psid_str(varlist = c("xsqnr || 	[69]ER30021 [70]ER30044 [71]ER30068 [72]ER30092 [73]ER30118 [74]ER30139 [75]ER30161 [76]ER30189 [77]ER30218 [78]ER30247 [79]ER30284 [80]ER30314 [81]ER30344 [82]ER30374 [83]ER30400 [84]ER30430 [85]ER30464 [86]ER30499 [87]ER30536 [88]ER30571 [89]ER30607 [90]ER30643 [91]ER30690 [92]ER30734 [93]ER30807 [94]ER33102 [95]ER33202 [96]ER33302 [97]ER33402 [99]ER33502 [01]ER33602 [03]ER33702 [05]ER33802 [07]ER33902 [09]ER34002 [11]ER34102 [13]ER34202 [15]ER34302 [17]ER34502 [19]ER34702 [21]ER34902",
                                          "rel2hh || [68]ER30003 [69]ER30022 [70]ER30045 [71]ER30069 [72]ER30093 [73]ER30119 [74]ER30140 [75]ER30162 [76]ER30190 [77]ER30219 [78]ER30248 [79]ER30285 [80]ER30315 [81]ER30345 [82]ER30375 [83]ER30401 [84]ER30431 [85]ER30465 [86]ER30500 [87]ER30537 [88]ER30572 [89]ER30608 [90]ER30644 [91]ER30691 [92]ER30735 [93]ER30808 [94]ER33103 [95]ER33203 [96]ER33303 [97]ER33403 [99]ER33503 [01]ER33603 [03]ER33703 [05]ER33803 [07]ER33903 [09]ER34003 [11]ER34103 [13]ER34203 [15]ER34303 [17]ER34503 [19]ER34703 [21]ER34903",
                                          "indfid || [68]ER30001 [69]ER30020 [70]ER30043 [71]ER30067 [72]ER30091 [73]ER30117 [74]ER30138 [75]ER30160 [76]ER30188 [77]ER30217 [78]ER30246 [79]ER30283 [80]ER30313 [81]ER30343 [82]ER30373 [83]ER30399 [84]ER30429 [85]ER30463 [86]ER30498 [87]ER30535 [88]ER30570 [89]ER30606 [90]ER30642 [91]ER30689 [92]ER30733 [93]ER30806 [94]ER33101 [95]ER33201 [96]ER33301 [97]ER33401 [99]ER33501 [01]ER33601 [03]ER33701 [05]ER33801 [07]ER33901 [09]ER34001 [11]ER34101 [13]ER34201 [15]ER34301 [17]ER34501 [19]ER34701 [21]ER34901",
                                          "famfid || [68]V3 [69]V442 [70]V1102 [71]V1802 [72]V2402 [73]V3002 [74]V3402 [75]V3802 [76]V4302 [77]V5202 [78]V5702 [79]V6302 [80]V6902 [81]V7502 [82]V8202 [83]V8802 [84]V10002 [85]V11102 [86]V12502 [87]V13702 [88]V14802 [89]V16302 [90]V17702 [91]V19002 [92]V20302 [93]V21602 [94]ER2002 [95]ER5002 [96]ER7002 [97]ER10002 [99]ER13002 [01]ER17002 [03]ER21002 [05]ER25002 [07]ER36002 [09]ER42002 [11]ER47302 [13]ER53002 [15]ER60002 [17]ER66002 [19]ER72002 [21]ER78002",
                                          "wlthid || [84]S101 [89]S201 [94]S301 [99]S401 [01]S501 [03]S601 [05]S701 [07]S801"),
                              type = "separated") |>
    dplyr::filter(year %in% year_toread)


ind_filename <- list.files(path = indir, pattern = "ind.*\\.rda")
load(file = file.path(indir, ind_filename), envir = temp_env)

matches <- ls(pattern = ".*ind.*", envir = temp_env)
if (length(matches) > 0){
      temp_env$ind_df <- get(matches[1], envir = temp_env)
      rm(list = matches[1], envir = temp_env)
    } else {
      stop("Please check if you have cross-year individual file in the directory")
    }
    
psid_df <- temp_env$ind_df |>
      dplyr::select(all_of(na.omit(c("ER30001","ER30002", temp_env$key_tb$indfid, temp_env$key_tb$xsqnr, temp_env$key_tb$rel2hh, idvars)))) |>
      dplyr::mutate(pid = ER30001 * 1000 + ER30002) |>
      dplyr::select(-ER30001,-ER30002)


 
varlist_toread <- setdiff(varlist_toread, colnames(psid_df))
 
varlist_temp <- intersect(varlist_toread, colnames(temp_env$ind_df))
temp_env$indcy_df <- temp_env$ind_df |>
      dplyr::select(all_of(c("ER30001","ER30002",varlist_temp))) |>
      dplyr::mutate(pid = ER30001 * 1000 + ER30002) |>
      dplyr::select(-ER30001,-ER30002)
 

# Merge back
psid_df <- psid_df |>
  dplyr::left_join(temp_env$indcy_df, by = "pid")

# Clean the env for next round data read
rm(list = setdiff(ls(envir = temp_env), "key_tb"), envir = temp_env)
yr <- 1968

famfid_yr <- unname(unlist(temp_env$key_tb |> dplyr::filter(year == yr) |> dplyr::select(famfid)))
      indfid_yr <- unname(unlist(temp_env$key_tb |> dplyr::filter(year == yr) |> dplyr::select(indfid)))
      wlthid_yr <- unname(unlist(temp_env$key_tb |> dplyr::filter(year == yr) |> dplyr::select(wlthid)))

      # Varlist to read for this year
      list_varyear <- unname(unlist(str_df |> dplyr::filter(year == yr) |> dplyr::select(-year)))

      # Remove duplicated variables
      list_varyear <- setdiff(list_varyear[!is.na(list_varyear)], colnames(psid_df))

```

:::: {.callout-tip title="Inside `psid_read()`"}
::: {style="height: 20px;"}
:::

```{r}
#| echo: true
#| error: true
name_fam_df <- list.files(path = indir, pattern = paste(".*fam",yr,".*\\.rda",sep = ""))
load(file = paste(indir,name_fam_df,sep="/"), envir = temp_env)


```
::::
Found that the package relies on additional *wealth data file*, while it seems like PSID is no longer providing the data.(I emailed psid data center days ago to ask if they still provide them.)

## Further investigation plan

-   get access of the MSA level data
-   check how I can utilize the individual-level data to perform data analysis

## Application Process(PSID data)

-   Contract must be made between user's institution and UMichigan
-   Submit materials include
    -   CV
    -   Resarch plan(justification of such use)
    -   IRB approval
    -   Data request form
    -   Virtual Data Enclave acceptable use policy
    -   VIrtual Data Enclave data security plan
    -   ISR Confidentiality pledge
    -   **\$750** non-refundable administrative fee

[For details, go to [PSID Applications](https://simba.isr.umich.edu/restricted/ProcessReq.aspx)]{style="position: absolute; bottom: 10px; right: 10px; font-size: smaller; color: gray;"}
