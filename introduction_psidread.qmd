---
title: "PSID Data Progress"
author: "Wooyong Park"
date: '2024-09-11'
format: 
  revealjs:
    footer: "Assortative Mating in Cities"
    title-slide-attributes: 
      data-background-image: images/title.png
    #transition: slide
    fontsize: 24pt
---

```{r setup, include=FALSE}

```

## Overview {background-image="images/main.jpg"}

-   How the PSID dataset looks like
-   Package Introduction(`psidread`)
-   Challenges
-   Marriage Related Variables
-   Data Application Process

## Raw data and [`psidread`](https://cran.r-project.org/web/packages/psidread/vignettes/my-vignette.html) {background-image="images/main.jpg"}

[`psidread`](https://cran.r-project.org/web/packages/psidread/vignettes/my-vignette.html) is a package written by Shuyi Qiu to help access PSID data in R. Although the PSID is the longest running longitudinal household survey data in the world, the process of converting raw PSID data files into datasets ready for analysis is quite complex.

##  {background-image="images/main.jpg"}

This is what the raw dataset looks like

```{r}
#| echo: true
#| message: false

library(tidyverse)
load('data/fam2021er.rda')
head(fam2021er)

```

## Challenges in Accessing Data {background-image="images/main.jpg"}

1.  Variable Names

| Year | hh education | number of children |
|:----:|:------------:|:------------------:|
| 2013 |   ER58223    |      ER53020       |
| 2015 |   ER65459    |      ER60021       |
| 2017 |   ER71538    |      ER66021       |
| 2019 |   ER77599    |      ER72021       |

## Challenges in Accessing Data {background-image="images/main.jpg"}

2.  Missing Waves

"In the PSID, survey questions vary across different waves, leading to some variables not being consistently available in all waves. Detailed information about the inclusion of specific questions in each wave is accessible only on the [cross-year index webpage](https://simba.isr.umich.edu/DC/i.aspx), a method that is **not user-friendly** for quick reference. Manually creating a list of variables for different years is an option, but it is tedious and inconvenient."

What I did to check available waves is to search the variable content in the [data center](https://simba.isr.umich.edu/DC/s.aspx)

## `psidread` package helps {background-image="images/main.jpg"}

-   create a table of data structure across multiple waves using the text that can be copied and pasted from the website
-   unzip and convert the zipped files without additional help of other software
-   read and merge the data files from multiple waves
-   rename and reshape the dataset to fit the need for advanced analysis

[For more information, please visit [the CRAN vignettes of the author](https://cran.r-project.org/web/packages/psidread/vignettes/my-vignette.html#1_Introduction).]{style="position: absolute; bottom: 10px; right: 10px; font-size: smaller; color: gray;"}

## Downloading the data {background-image="images/main.jpg"}

![psid data webpage](images/psid_data_center.png)

# Actual use of the psidread package {background-image="images/title.png"}

## DAG of `psidread` workflow {background-image="images/main.jpg"}

::: columns
::: {.column width="30%"}
<img src="images/psid_read.png" width="300" height="500"/>
:::

::: {.column width="70%"}
Example:

```{r}
#| echo: true
library(psidread)
psid_varlist = c(" hh_age || [13]ER53017 [17]ER66017",
                 " p_age || [13]ER34204")
psid_str(varlist = psid_varlist)
```
:::
:::

##  {background-image="images/main.jpg"}

In our case,

```{r}
#| echo: true
library(psidread)

input_directory <- 'data'
output_directory <- 'data'
str_df <- psid_str(
  varlist = c('pair_id || 	[68]ER30005 [69]ER30024 [70]ER30047 [71]ER30071 [72]ER30095 [73]ER30121 [74]ER30142 [75]ER30164 [76]ER30192 [77]ER30221 [78]ER30250 [79]ER30287 [80]ER30317 [81]ER30347 [82]ER30377 [83]ER30405 [84]ER30435 [85]ER30469 [86]ER30504 [87]ER30541 [88]ER30576 [89]ER30612 [90]ER30648 [91]ER30695 [92]ER30739 [93]ER30812 [94]ER33107 [95]ER33207 [96]ER33307 [97]ER33407 [99]ER33507 [01]ER33607 [03]ER33707 [05]ER33807 [07]ER33907 [09]ER34007 [11]ER34107 [13]ER34207 [15]ER34308 [17]ER34507 [19]ER34707 [21]ER34907',
              'hh_marst_old || [68]V239 [69]V607 [70]V1365 [71]V2072 [72]V2670 [73]V3181 [74]V3598 [75]V4053 [76]V4603 [77]V5650 [78]V6197 [79]V6790 [80]V7435 [81]V8087 [82]V8711 [83]V9419 [84]V11065 [85]V12426 [86]V13665 [87]V14712 [88]V16187 [89]V17565 [90]V18916 [91]V20216 [92]V21522 [93]V23336 [94]ER4159A [95]ER6999A [96]ER9250A [97]ER12223A [99]ER16423 [01]ER20369 [03]ER24150 [05]ER28049 [07]ER41039 [09]ER46983 [11]ER52407 [13]ER58225 [15]ER65461 [17]ER71540 [19]ER77601 [21]ER81928',
              'hh_marst || [77]V5502 [78]V6034 [79]V6659 [80]V7261 [81]V7952 [82]V8603 [83]V9276 [84]V10426 [85]V11612 [86]V13017 [87]V14120 [88]V15136 [89]V16637 [90]V18055 [91]V19355 [92]V20657 [93]V22412 [94]ER2014 [95]ER5013 [96]ER7013 [97]ER10016 [99]ER13021 [01]ER17024 [03]ER21023 [05]ER25023 [07]ER36023 [09]ER42023 [11]ER47323 [13]ER53023 [15]ER60024 [17]ER66024 [19]ER72024 [21]ER78025',
              'fam_comp_change || [69]V542 [70]V1109 [71]V1809 [72]V2410 [73]V3010 [74]V3410 [75]V3810 [76]V4310 [77]V5210 [78]V5710 [79]V6310 [80]V6910 [81]V7510 [82]V8210 [83]V8810 [84]V10010 [85]V11112 [86]V12510 [87]V13710 [88]V14810 [89]V16310 [90]V17710 [91]V19010 [92]V20310 [93]V21608 [94]ER2005A [95]ER5004A [96]ER7004A [97]ER10004A [99]ER13008A [01]ER17007 [03]ER21007 [05]ER25007 [07]ER36007 [09]ER42007 [11]ER47307 [13]ER53007 [15]ER60007 [17]ER66007 [19]ER72007 [21]ER78007',
              'marst_change || [77]V5680 [78]V6219 [79]V6812 [80]V7455 [81]V8107 [82]V8731 [83]V9420 [84]V11066 [85]V12427 [86]V13666 [87]V14713 [88]V16188 [89]V17566 [90]V18917 [91]V20217 [92]V21523 [93]V23337 [94]ER4159B [95]ER6999B [96]ER9250B [97]ER12223B [99]ER16424 [01]ER20370 [03]ER24151 [05]ER28050 [07]ER41040 [09]ER46984 [11]ER52408 [13]ER58226 [15]ER65462 [17]ER71541 [19]ER77602 [21]ER81929',
              'state || [68]V93 [69]V537 [70]V1103 [71]V1803 [72]V2403 [73]V3003 [74]V3403 [75]V3803 [76]V4303 [77]V5203 [78]V5703 [79]V6303 [80]V6903 [81]V7503 [82]V8203 [83]V8803 [84]V10003 [85]V11103 [86]V12503 [87]V13703 [88]V14803 [89]V16303 [90]V17703 [91]V19003 [92]V20303 [93]V21603 [94]ER4156 [95]ER6996 [96]ER9247 [97]ER12221 [99]ER13004 [01]ER17004 [03]ER21003 [05]ER25003 [07]ER36003 [09]ER42003 [11]ER47303 [13]ER53003 [15]ER60003 [17]ER66003 [19]ER72003 [21]ER78003'
              )
  
)

```

##  {background-image="images/main.jpg"}

```{r}
#| echo: true
head(str_df)
```

## Marriage related Variables {background-image="images/main.jpg"}

| Variable | Available years | Level |
|:----:|:------------:|:------------------:|
| [Marital Status(Head)](https://simba.isr.umich.edu/cb.aspx?vList=ER78025) |   1977-2021    |      Family       |
| [Last known marital status](https://simba.isr.umich.edu/cb.aspx?vList=ER32049) |   All years(1968-2021)    |      Individual       |
| [Married Pairs Indicator](https://simba.isr.umich.edu/cb.aspx?vList=ER34907) |   All years    |      Individual       |
| [Change in Martial Status](https://simba.isr.umich.edu/cb.aspx?vList=ER81929) |   1977-2021    |      Family       |
| [# of Marriages](https://simba.isr.umich.edu/cb.aspx?vList=ER32034) |   All years    |      Individual       |
| [Month of First Marriage](https://simba.isr.umich.edu/cb.aspx?vList=ER32035) |   All years    |      Individual       |
| [Year of First Marriage](https://simba.isr.umich.edu/cb.aspx?vList=ER32036) |   All years    |      Individual       |
| [Month of First Separation](https://simba.isr.umich.edu/cb.aspx?vList=ER32040) |   All years    |      Individual       |
| [Year of First Separation](https://simba.isr.umich.edu/cb.aspx?vList=ER32041) |   All years    |      Individual       |
| [Status of Most Recent Marriage](https://simba.isr.umich.edu/cb.aspx?vList=ER32044) |   All years    |      Individual       |
| [Month Separated of Most Recent Marriage](https://simba.isr.umich.edu/cb.aspx?vList=ER32047) |   All years    |      Individual       |
| [Year Separated of Most Recent Marriage](https://simba.isr.umich.edu/cb.aspx?vList=ER32048) |   All years    |      Individual       |
| [Month ended of Most Recent Marriage](https://simba.isr.umich.edu/cb.aspx?vList=ER32045) |   All years    |      Individual       |
| [Year ended of Most Recent Marriage](https://simba.isr.umich.edu/cb.aspx?vList=ER32046) |   All years    |      Individual       |


## Data Availability {background-image="images/main.jpg"}

<p style="text-align: justify;">

**Only state level residence is publicly open.** Finer levels including county, tract, block, zip code, MSA, CBSA and FIPS are all restricted. I explain the details of accessing details not before long.

</p>

## Current Progress {background-image="images/main.jpg"}

`psidread` is the only available package for now. (Several other packages including `psidr`, `easypsid` are outdated.)

However, it returns handful of errors at every stage of its functions.

Last time I fixed issues with handling singular data, and I recently started fixing issues with handling packaged data.

## Current Progress {background-image="images/main.jpg"}

::: {.callout-tip title="`psidread::psid_read()`"}
::: {style="height: 20px;"}
:::

```{r}
#| echo: true
#| error: true 
psid_df <- psid_read(indir = output_directory,
                     str_df = str_df,
                     idvars = c('ER30000'),
                     type = 'package',
                     filename = NA)
```
:::

<br> <!--   creates a vertical space(padding) -->

```{r packagesetup}
#| echo: false
indir <- output_directory
idvars <- c('ER30000')

year_toread <- str_df$year
varlist_toread <- unname(unlist(str_df[,c(2:ncol(str_df))]))
varlist_toread <- varlist_toread[!is.na(varlist_toread)]

temp_env <- new.env()

  # Table of key for match
temp_env$key_tb <- psid_str(varlist = c("xsqnr || 	[69]ER30021 [70]ER30044 [71]ER30068 [72]ER30092 [73]ER30118 [74]ER30139 [75]ER30161 [76]ER30189 [77]ER30218 [78]ER30247 [79]ER30284 [80]ER30314 [81]ER30344 [82]ER30374 [83]ER30400 [84]ER30430 [85]ER30464 [86]ER30499 [87]ER30536 [88]ER30571 [89]ER30607 [90]ER30643 [91]ER30690 [92]ER30734 [93]ER30807 [94]ER33102 [95]ER33202 [96]ER33302 [97]ER33402 [99]ER33502 [01]ER33602 [03]ER33702 [05]ER33802 [07]ER33902 [09]ER34002 [11]ER34102 [13]ER34202 [15]ER34302 [17]ER34502 [19]ER34702 [21]ER34902",
                                          "rel2hh || [68]ER30003 [69]ER30022 [70]ER30045 [71]ER30069 [72]ER30093 [73]ER30119 [74]ER30140 [75]ER30162 [76]ER30190 [77]ER30219 [78]ER30248 [79]ER30285 [80]ER30315 [81]ER30345 [82]ER30375 [83]ER30401 [84]ER30431 [85]ER30465 [86]ER30500 [87]ER30537 [88]ER30572 [89]ER30608 [90]ER30644 [91]ER30691 [92]ER30735 [93]ER30808 [94]ER33103 [95]ER33203 [96]ER33303 [97]ER33403 [99]ER33503 [01]ER33603 [03]ER33703 [05]ER33803 [07]ER33903 [09]ER34003 [11]ER34103 [13]ER34203 [15]ER34303 [17]ER34503 [19]ER34703 [21]ER34903",
                                          "indfid || [68]ER30001 [69]ER30020 [70]ER30043 [71]ER30067 [72]ER30091 [73]ER30117 [74]ER30138 [75]ER30160 [76]ER30188 [77]ER30217 [78]ER30246 [79]ER30283 [80]ER30313 [81]ER30343 [82]ER30373 [83]ER30399 [84]ER30429 [85]ER30463 [86]ER30498 [87]ER30535 [88]ER30570 [89]ER30606 [90]ER30642 [91]ER30689 [92]ER30733 [93]ER30806 [94]ER33101 [95]ER33201 [96]ER33301 [97]ER33401 [99]ER33501 [01]ER33601 [03]ER33701 [05]ER33801 [07]ER33901 [09]ER34001 [11]ER34101 [13]ER34201 [15]ER34301 [17]ER34501 [19]ER34701 [21]ER34901",
                                          "famfid || [68]V3 [69]V442 [70]V1102 [71]V1802 [72]V2402 [73]V3002 [74]V3402 [75]V3802 [76]V4302 [77]V5202 [78]V5702 [79]V6302 [80]V6902 [81]V7502 [82]V8202 [83]V8802 [84]V10002 [85]V11102 [86]V12502 [87]V13702 [88]V14802 [89]V16302 [90]V17702 [91]V19002 [92]V20302 [93]V21602 [94]ER2002 [95]ER5002 [96]ER7002 [97]ER10002 [99]ER13002 [01]ER17002 [03]ER21002 [05]ER25002 [07]ER36002 [09]ER42002 [11]ER47302 [13]ER53002 [15]ER60002 [17]ER66002 [19]ER72002 [21]ER78002",
                                          "wlthid || [84]S101 [89]S201 [94]S301 [99]S401 [01]S501 [03]S601 [05]S701 [07]S801"),
                              type = "separated") |>
    dplyr::filter(year %in% year_toread)


ind_filename <- list.files(path = indir, pattern = "ind.*\\.rda")
load(file = file.path(indir, ind_filename), envir = temp_env)

matches <- ls(pattern = ".*ind.*", envir = temp_env)
if (length(matches) > 0){
      temp_env$ind_df <- get(matches[1], envir = temp_env)
      rm(list = matches[1], envir = temp_env)
    } else {
      stop("Please check if you have cross-year individual file in the directory")
    }
    
psid_df <- temp_env$ind_df |>
      dplyr::select(all_of(na.omit(c("ER30001","ER30002", temp_env$key_tb$indfid, temp_env$key_tb$xsqnr, temp_env$key_tb$rel2hh, idvars)))) |>
      dplyr::mutate(pid = ER30001 * 1000 + ER30002) |>
      dplyr::select(-ER30001,-ER30002)


 
varlist_toread <- setdiff(varlist_toread, colnames(psid_df))
 
varlist_temp <- intersect(varlist_toread, colnames(temp_env$ind_df))
temp_env$indcy_df <- temp_env$ind_df |>
      dplyr::select(all_of(c("ER30001","ER30002",varlist_temp))) |>
      dplyr::mutate(pid = ER30001 * 1000 + ER30002) |>
      dplyr::select(-ER30001,-ER30002)
 

# Merge back
psid_df <- psid_df |>
  dplyr::left_join(temp_env$indcy_df, by = "pid")

# Clean the env for next round data read
rm(list = setdiff(ls(envir = temp_env), "key_tb"), envir = temp_env)
yr <- 1968

famfid_yr <- unname(unlist(temp_env$key_tb |> dplyr::filter(year == yr) |> dplyr::select(famfid)))
      indfid_yr <- unname(unlist(temp_env$key_tb |> dplyr::filter(year == yr) |> dplyr::select(indfid)))
      wlthid_yr <- unname(unlist(temp_env$key_tb |> dplyr::filter(year == yr) |> dplyr::select(wlthid)))

      # Varlist to read for this year
      list_varyear <- unname(unlist(str_df |> dplyr::filter(year == yr) |> dplyr::select(-year)))

      # Remove duplicated variables
      list_varyear <- setdiff(list_varyear[!is.na(list_varyear)], colnames(psid_df))

```

::: {.callout-tip title="Inside `psid_read()`"}
::: {style="height: 20px;"}
:::

```{r}
#| echo: true
#| error: true
name_fam_df <- list.files(path = indir, pattern = paste(".*fam",yr,".*\\.rda",sep = ""))
load(file = paste(indir,name_fam_df,sep="/"), envir = temp_env)


```
:::

## Application Process(PSID data) {background-image="images/main.jpg"}

-   Contract must be made between user's institution and UMichigan
-   Submit materials include
    -   CV
    -   Resarch plan(justification of such use)
    -   IRB approval
    -   Data request form
    -   Virtual Data Enclave acceptable use policy
    -   VIrtual Data Enclave data security plan
    -   ISR Confidentiality pledge
    -   **\$750** non-refundable administrative fee

[For details, go to [PSID Applications](https://simba.isr.umich.edu/restricted/ProcessReq.aspx)]{style="position: absolute; bottom: 10px; right: 10px; font-size: smaller; color: gray;"}
